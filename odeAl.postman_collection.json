{
	"info": {
		"_postman_id": "a9212d28-58f3-4b83-bd53-17d420501b8e",
		"name": "odeAl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"test\", jsonData.code);\r",
							"\r",
							"tests[\"Response code 200 mü kontrolü yapılır\"] = jsonData.code == 200;\r",
							"\r",
							"//Status code 200 mü ?\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Response time 1000ms nin altında mı ? \r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('A User will be Created');\r",
							"\r",
							"pm.environment.set(\"userName\", getRandomName());\r",
							"pm.environment.set(\"lastName\", getRandomlastName());\r",
							"pm.environment.set(\"eMail\", getRandomEmail());\r",
							"\r",
							"function getRandomlastName() {\r",
							"    const lastName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"    return lastName;\r",
							"}\r",
							"\r",
							"function getRandomName() {\r",
							"    const userName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"    return userName;\r",
							"}\r",
							"\r",
							"function getRandomEmail() {\r",
							"    const eMail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
							"    return eMail;\r",
							"}\r",
							"\r",
							"pm.sendRequest(\"https://randomuser.me/api/?nat=us&inc=phone\", (err, res) => {\r",
							"    pm.environment.set('phoneNumber', res.json().results[0].phone)\r",
							"}) \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{userName}}\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{eMail}}\",\r\n  \"password\": \"11223344\",\r\n  \"phone\": \"{{phoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user",
					"host": [
						"{{url}}user"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserByUserName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('User information will be retrieved using the username and password information of the created user.');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.environment.set(\"userId\", jsonData.id);\r",
							"\r",
							"    if (jsonData.username == pm.variables.get('userName')) {\r",
							"        tests[\"Create edilen usr getirlidi Passed\"] = jsonData !== null;\r",
							"    }\r",
							"    else{\r",
							"        tests[\"Create edilen User getirilemedi FAILED\"] = jsonData == null;\r",
							"    }\r",
							"\r",
							"console.log(\"jsonData.id\"+jsonData.id)\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/{{userName}}",
					"host": [
						"{{url}}user"
					],
					"path": [
						"{{userName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "petCreateAvailable",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Status: An available pet will be created.');\r",
							"\r",
							"pm.environment.set(\"petNameAvailable\", getPetName());\r",
							"\r",
							"function getPetName() {\r",
							"    const petname = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"    return petname;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log('LOOOGGG')\r",
							"\r",
							"responseBody = responseBody.replace(/\\\"id\"\\s?:\\s?([0-9]*)/g, `\"id\": \"$1\"`)\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.environment.set(\"petIdAvailable\", jsonData.id);\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{petNameAvailable}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}pet",
					"host": [
						"{{url}}pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "petCreateSold",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Status: One more sold pet will be created.');\r",
							"\r",
							"pm.environment.set(\"petNameSold\", getPetName());\r",
							"\r",
							"function getPetName() {\r",
							"    const petname = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"    return petname;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.environment.set(\"petIdSold\", jsonData.id);\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"{{petNameSold}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}pet",
					"host": [
						"{{url}}pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "findByStatus?status=available",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('The list of available pets will be brought in and there will be no list of pets that are Sold.');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"var arr = pm.response.json()\r",
							"for(i = 0; i < arr.length; i++) {\r",
							"    if (jsonData[i].status == \"available\") {\r",
							"        tests[\"Liste içerisinde Sold petler Yoktur Passed\"] = jsonData !== null;\r",
							"    }\r",
							"    else{\r",
							"        tests[\"Liste içerisinde Sold petler Vardır FAILED\"] = jsonData == null;\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}pet/findByStatus?status=available",
					"host": [
						"{{url}}pet"
					],
					"path": [
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "available"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "pet/{{petIdAvailable}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Using the id of the available pet, the data of the relevant pet will be brought.');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}pet/{{petIdAvailable}}",
					"host": [
						"{{url}}pet"
					],
					"path": [
						"{{petIdAvailable}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "store/order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Using the same pet id, 1 pet will be ordered and a pet with 1 id will be ordered.');\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.environment.set(\"orderDate\", jsonData.shipDate);\r",
							"    if (jsonData.complete) {\r",
							"        tests[\"pet sipariş edildi Passed\"] = jsonData !== null;\r",
							"    }\r",
							"    else{\r",
							"        tests[\"pet sipariş edilmedi FAILED\"] = jsonData == null;\r",
							"    }\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{orderId}},\r\n  \"petId\": {{petIdAvailable}},\r\n  \"quantity\": 0,\r\n  \"shipDate\": \"2021-02-17T08:30:21.124Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}store/order",
					"host": [
						"{{url}}store"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "get/order/{orderId}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('The purchase order of the Pet whose Order ID is given as 1 will be found and it will be checked whether the correct order is available.');"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"\r",
							"    if (jsonData.shipDate ==pm.variables.get('orderDate') ) {\r",
							"        tests[\"doğru sipariş bulundu Passed\"] = jsonData !== null;\r",
							"    }\r",
							"    else{\r",
							"        tests[\"doğru sipariş bulunmadı FAILED\"] = jsonData == null;\r",
							"    }\r",
							"\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"orderId\"  : {{orderId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}store/order/1",
					"host": [
						"{{url}}store"
					],
					"path": [
						"order",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete/store/order/{petId }",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"tests[\"Response time < 1000ms\"] = responseTime < 1000;\r",
							"\r",
							"tests[\"Datalarım Geldi mi ?\"] = jsonData !== null;\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok; \r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('The pet used will be deleted.');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}pet/{{petIdAvailable}}",
					"host": [
						"{{url}}pet"
					],
					"path": [
						"{{petIdAvailable}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "pet/deleteTeyit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody)\r",
							"\r",
							"    if (jsonData.message ==\"Pet not found\" ) {\r",
							"        tests[\"doğru pet silinmiş Passed\"] = jsonData !== null;\r",
							"    }\r",
							"    else{\r",
							"        tests[\"doğru pet silinmemiş FAILED\"] = jsonData == null;\r",
							"    }"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Using the id of the available pet, the data of the relevant pet will be brought.');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}pet/{{petIdAvailable}}",
					"host": [
						"{{url}}pet"
					],
					"path": [
						"{{petIdAvailable}}"
					]
				}
			},
			"response": []
		}
	]
}